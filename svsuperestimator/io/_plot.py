"""This module holds various plotting classes."""
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go


class _PlotlyPlot:
    """Base class for plotting classes based on plotly.

    Defines common methods to handle plotly plots.
    """

    # Default layout for plots generated by plotly
    _DEFAULT_LAYOUT = {
        "plot_bgcolor": "rgba(0, 0, 0, 0)",
        "paper_bgcolor": "rgba(0, 0, 0, 0)",
        "template": "plotly_dark",
    }

    def __init__(self, **kwargs: str) -> None:
        """Create a new _PlotlyPlot instance."""
        self._fig = go.Figure()
        self._layout = self._DEFAULT_LAYOUT.copy()
        self.configure(**kwargs)

    def to_html(self) -> str:
        """Export plot as an html encoded string.

        Returns:
            html_fig: Plotly figure in html format.
        """
        self._fig.update_layout(**self._layout)
        return self._fig.to_html(
            include_plotlyjs="cdn", include_mathjax="cdn", full_html=False
        )

    def to_image_file(self, path: str) -> None:
        """Export plot as image file.

        Supported formats png, jpg, jpeg, webp, svg, pdf, eps.

        Args:
            path: Target path for image.
        """
        self._fig.update_layout(**self._layout)
        self._fig.write_image(path)

    def configure(
        self,
        title: str = None,
        xlabel: str = None,
        ylabel: str = None,
        legend_title: str = None,
    ) -> None:
        """Set various configurations for the plot.

        Args:
            title: Figure title.
            xlabel: Label of the x-axis.
            ylabel: Label of the y-axis.
            legend_title: Title of the legend.
        """
        if title is not None:
            self._layout["title"] = title
        if xlabel is not None:
            self._layout["xaxis_title"] = xlabel
        if ylabel is not None:
            self._layout["yaxis_title"] = ylabel
        if legend_title is not None:
            self._layout["legend_title"] = legend_title


class LinePlot(_PlotlyPlot):
    """Line plot."""

    def __init__(
        self,
        dataframe: pd.DataFrame,
        x: str = None,
        y: str = None,
        color: str = None,
        **kwargs: str
    ) -> None:
        """Create a new LinePlot instance.

        Args:
            dataframe: The dataframe to plot.
            x: Label of the dataframe to use for the x-axis.
            y: Label of the dataframe to use for the y-axis.
            color: Label of the dataframe to use for the color.
        """
        super().__init__(**kwargs)
        self._fig = px.line(dataframe, x=x, y=y, color=color)


class TablePlot(_PlotlyPlot):
    """Table plot."""

    def __init__(self, dataframe: pd.DataFrame, **kwargs: str):
        """Create a new TablePlot instance.

        Args:
            dataframe: The dataframe to plot.
        """
        super().__init__(**kwargs)
        columns = list(dataframe.columns)
        table = go.Table(
            header=dict(
                values=columns,
                line_color="white",
                fill_color="rgba(0,0,0,0)",
                font=dict(color="white"),
            ),
            cells=dict(
                values=[dataframe[col] for col in columns],
                line_color="white",
                fill_color="rgba(0,0,0,0)",
                font=dict(color="white"),
            ),
        )
        self._fig = go.Figure(
            data=[table],
            layout=go.Layout(
                margin=go.layout.Margin(
                    l=1,  # left margin
                    r=1,  # right margin
                    b=1,  # bottom margin
                    t=1,  # top margin
                )
            ),
        )
